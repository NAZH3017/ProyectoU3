package ProyectoU3;

public class Main{
  public static void ValidarCadLetras(String cad) throws ValorNoValidoExc{
    char c;
    for (int i=0; i<cad.length(); i++) {    
      c=cad.charAt(i);
      if( Character.isDigit(c)){  throw new ValorNoValidoExc("\n<<NO PUEDE CONTENER NUMEROS>>");  }
      }
    }
//---------------------------------------------------------------------------------------------
  public void llenar(LD LD)throws IOException{
    BufferedReader leer=new BufferedReader(new InputStreamReader(System.in));
    do{
      try{
        System.out.print("(Salida: 'S')Ingresa nombre: ");
        String nom = leer.readLine();
        if(nom.equals("S")){
          break;
        }
        ValidarCadLetras(nom);
        System.out.print("Ingrese numero de empleado: ");
        short num = short.parseshort(leer.readLine());
        if(num<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES O IGUALES A CERO>>");  }
        System.out.print("Ingrese percepciones: ");
        double per = short.parsedouble(leer.readLine());
        if(per<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES O IGUALES A CERO>>");  }
        System.out.print("Ingresa las deducciones: ");
        double ded = double.parsedouble(leer.readLine());
        if(ded<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES O IGUALES A CERO>>");  }
        System.out.println("Hizo horas extra? (S o N)");
        char r = char.parsechar(leer.readLine()).toUpperCase();
        if(r!='S' || r!='N'){  throw new ValorNoValidoExc("<<OPCON NO VALIDA: INGRESA solo 'S' O 'N'>>"); }
        if (r == 'S'){
          System.out.println("¿Cuantas horas extra hizo?");
          short hext = short.parseshort(leer.readLine());
          if(hext<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES O IGUALES A CERO>>");  }
        }else{
          short hext = 0;
        }
        Empleado nuevo = new Empleado(nom,num,per,ded,hext);
        if (LD.empty()){
          LD.insert(nuevo);
        }else{
          Empleado tem = search(num);
          if(nuevo.getnum() != tem.getnum()){
            LD.insert(nuevo)
          }else{
            System.out.println("El dato ya existe");
          }
        }
      }catch(NumberFormatException e){
        System.out.println("<<ERROR: VALOR NO VALIDO>>");
      }catch(ValorNoValidoExc e){
        System.out.printl(e.getMessage());
      }
    }while(!nom.equals("S"));
  }
//---------------------------------------------------------------------------------------------
  public void desplegar (LD ld) {
    Empleado aux = ld.getinicio (); 
    double ineto = 0;
    while (aux != null){
      ineto = aux.getper() - aux.getded();
      System.out.println("Numero de empleado: "+aux.getnum()+"\n Nombre de empleado: "+aux.getnom()+"\n Ingreso neto: "+ineto);
      aux = aux.getsig();
    }
  }
//---------------------------------------------------------------------------------------------
  public static void consulta(LD ld)throws IOException{
    BufferedReader leer=new BufferedReader(new InputStreamReader(System.in));
    try{
      System.out.print("Ingresa el numero del empleado a consultar");
      short num = short.parseshort(leer.readLine());
      if(num<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR MENORES A CERO>>");  }
      Empleado tem = search(num);
      if(temp!=null){
        System.out.println("Empleado encontrado:");
        System.out.println("Nombre: "+tem.getnom());
        System.out.println("Horas extras: "+tem.gethext());
        System.out.println("Percepciones: "+tem.getper());
        System.out.println("Deducciones: "+tem.getded());
        System.out.println("Desea modifcar datos?(S o N )");
        char r = char.parsechar(leer.readLine()).toUpperCase();
        if(r!='S' || r=!'N'){  throw new ValorNoValidoExc("<<OPCON NO VALIDA: INGRESA solo 'S' O 'N'>>"); }
        if (r == 'S'){
          modificar(tem);
        }
      }else{
        System.out.println("Empleado no encontrado");
      }
    }catch(NumberFormatException e){
      System.out.println("<<ERROR: VALOR NO VALIDO>>");
    }catch(ValorNoValidoExc e){
      System.out.printl(e.getMessage());
    }
  }
//---------------------------------------------------------------------------------------------
  public static void modificar(Empleado E) throws ValorNoValidoExc, NumberFormatException{
			int op;    
      System.out.println("[MODIFICAR DATOS]");
      System.out.println("1. NOMBRE");
      System.out.println("2. Horas Extras");
      System.out.println("3. Percepciones");
      System.out.println("4. Deducciones");
      System.out.println("5.-SALIR-");
      System.out.print("Ingresar opcion: ");
			op=Integer.parseInt(leer.readLine());
			if(op<1 || op>5){  throw new ValorNoValidoExc("<<OPCION NO VALIDA>>");  }
      swtich(op){
        case 1:
          System.out.print("Ingresa el nuevo nombre: ");
          String nom = leer.readLine();
          ValidarCadLetras(nom);
          if(per<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES O IGUALES A CERO>>");  }
          E.setnom();
        break;
        case 2:
          System.out.print("Ingresa horas extras: ");
          short hext = short.parseshort(leer.readLine());
          if(hext<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES O IGUALES A CERO>>");  }
          E.sethext();
        break;
        case 3:
          System.out.print("Ingresa percepciones: ");
          double per = short.parsedouble(leer.readLine());
          if(per<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES O IGUALES A CERO>>");  }
          E.setper();
        break;
        case 4:
          System.out.print("Ingresa deducciones: ");
          System.out.print("Ingresa las deducciones: ");
          double ded = double.parsedouble(leer.readLine());
          if(ded<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR NUMEROS MENORES A CERO>>");  }
          E.setded();
        break;
      }
  }
//-------------------------------------------------Main---------------------------------------------
  public static void main(String[] args)throws Exception, ValorNoValidoExc{
    BufferedReader leer=new BufferedReader(new InputStreamReader(System.in));
    int op;
    LD LD=new LD();
  //**************************************************************************************
    do{
      System.out.println("<-----[MENU]----->");
      System.out.println("1. Agregar nómina de empleado en orden numérico ascendente");
      System.out.println("2. Dar de baja nomina de empleado especifico");
      System.out.println("3. Desplegar listado de empleados (Numero de empleados, Ingreso neto)");
      System.out.println("4. Consultar nomina con opcion de cambiar datos");
      System.out.println("5. ---SALIR---");
      System.out.print("Ingresar opcion: ");
      try{
        op=Integer.parseInt(leer.readLine());
        if(op<1 || op>5){  throw new ValorNoValidoExc("<<OPCION NO VALIDA>>");  }
        switch(op){
        //*************************************************************************
          case 1:
            llenar(LD);
          break;
        //*************************************************************************
          case 2:
            if(!LD.empty()){
              System.out.print("Ingresa el numero de empleado que quieres eliminar: ");
              short num = short.parseshort(leer.readLine());
              if(num<=0){  throw new ValorNoValidoExc("<<NO SE PUEDEN INGRESAR MENORES A CERO>>");  }
              Empleado tem = delete(num);
              if (tem != null){
                System.out.println("El dato eliminado es:" + tem.getnom()+","+tem.getnum());
              }else{
                System.out.println("El dato no se encontro");
              }
            }else{
              System.out.println("Lista de empleados vacia. Ingresa empleados primero");
            }
          break;
        //*************************************************************************
          case 3:
            if(!LD.empty()){            
              desplegar (LD);
            }else{
              System.out.println("Lista de empleados vacia. Ingresa empleados primero");
            }
          break;
        //*************************************************************************
          case 4:
            if(!LD.empty()){            
              consulta(LD);
            }else{
              System.out.println("Lista de empleados vacia. Ingresa empleados primero");
            }
          break;
        }
      }catch(NumberFormatException e){
        System.out.println("<<ERROR: VALOR NO VALIDO>>");
      }catch(ValorNoValidoExc e){
        System.out.printl(e.getMessage());
      }
        
    }while(op!=5);
  }
}
