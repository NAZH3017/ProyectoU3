public class Departamento{//Arbol
private nodoDepto raiz;
//------------------------------------------------------------------------------Get y Set(Raiz)
    public nodoDepto getRaiz(){
        return raiz;
    }
    public void setRaiz(nodoDepto raiz){
        this.raiz = raiz;
    }
//------------------------------------------------------------------------------MÃ©todos
    public boolean empty(){
        return (raiz==null);
    }
    //**************************************************************************
    public void insert(nodoDepto nuevo){
        int nivel=0;
        if(empty()){
            setRaiz(nuevo);
        }else{
            nodoDepto aux=getRaiz();
            while(aux!=nuevo){
                if(nuevo.getNomDepto().compareTo(aux.getNomDepto())==0){//Nombres Iguales
                    System.out.println("Departamento ya existente");
                    break;
                }else if(nuevo.getNomDepto().compareTo(aux.getNomDepto())<0){//nuevo.NomDepto()<aux.getCod()
                    if(aux.getHIzq()==null){
                        aux.setHIzq(nuevo);
                    }
                    aux=aux.getHIzq();
                }else{
                    if(aux.getHDer()==null){
                        aux.setHDer(nuevo);
                    }
                    aux=aux.getHDer();
                }
                nivel++;
            }
            nuevo.setNivel(nivel);
        }
    }
    //**************************************************************************
    public nodoDepto delete(String nom){
        nodoDepto aux=getRaiz();
        nodoDepto padre=getRaiz();
        while(aux!=null && !nom.equals(aux.getNomDepto())){
            padre=aux;
            if(nom.compareTo(aux.getNomDepto())<0){//cod<aux.getCod()
                aux=aux.getHIzq();
            }else{
                aux=aux.getHDer();
            }
        }
        if(aux==null){//No encontrado
            return null;
        }else if(aux.getHIzq()==null && aux.getHDer()==null){//Hoja
            deleteHoja(padre, aux);
            return aux;
        }else if(aux.getHIzq()==null || aux.getHDer()==null){//Un Hijo
            deleteUnHijo(padre, aux);
            return aux;
        }else{//Dos Hijos
            deleteDosHijos(padre, aux);
            return aux;
        }
        
    }
    //**************************************************************************
    public void deleteHoja(nodoDepto Padre, nodoDepto aux){
        if(Padre.getHIzq()==aux){
            Padre.setHIzq(null);
        }else{
            Padre.setHDer(null);
        }
    }
    //*************************************************
    public void deleteUnHijo(nodoDepto Padre, nodoDepto aux){
        if(Padre.getHIzq()==aux ){
            if(aux.getHIzq()!=null){
                Padre.setHIzq(aux.getHIzq());
            }else{
                Padre.setHIzq(aux.getHDer());
            }
            Padre.getHIzq().setNivel(aux.getNivel());//n
        }else{
            if(aux.getHDer()!=null){
                Padre.setHDer(aux.getHDer());
            }else{
                Padre.setHDer(aux.getHIzq());
            }
            Padre.getHDer().setNivel(aux.getNivel());//n
        }
    }
    //*************************************************
    public void deleteDosHijos(nodoDepto Padre, nodoDepto aux){
        if(aux.getHIzq().getHDer()==null){
            aux.getHIzq().setHDer(aux.getHDer());
            aux.getHIzq().getHDer(aux.getNivel()());
            if(Padre.getHIzq()==aux){
                Padre.setHIzq(aux.getHIzq());
                Padre.getHIzq().setNivel(aux.getNivel());//n
            }else{
                Padre.setHDer(aux.getHIzq());
                Padre.getHDer().setNivel(aux.getNivel());//n
            }
        }else{
            nodoDepto Temp=aux.getHIzq();
            nodoDepto Pad2=aux;
            while(Temp.getHDer()!=null){
                Pad2=Temp;
                Temp=Temp.getHDer();
            }
            
            Pad2.setHDer(Temp.getHIzq());
            Pad2.getHDer().setNivel(Temp.getNivel());//n
            Temp.setHDer(aux.getHDer());
            Temp.setHIzq(aux.getHIzq());
            Temp.getHDer().setNivel((Temp.getNivel()+1));//n
            Temp.getHIzq().setNivel((Temp.getNivel()+1));//n
            if(Padre.getHIzq()==aux){
                Padre.setHIzq(Temp);
                Padre.getHIzq().setNivel((Padre.getNivel()+1));//n
            }else{
                Padre.setHDer(Temp);
                Padre.getHDer().setNivel((Padre.getNivel()+1));//n
            }
        }
    }
    //**************************************************************************
    public void inOrden(nodoDepto nodo){//Desplegar Departamentos en orden alfabetico
        if(nodo!=null){
            inOrden(nodo.getHIzq());
            System.out.println("Departamento: "+nodo.getNomDepto());
            System.out.println("Horas Extras: "+nodo.getTotalHextra());
            System.out.println("Total de Ingresos brutos: "+nodo.getTotalImpPerc()+"\n");
            inOrden(nodo.getHDer());
        }
    }
    //**************************************************************************
    public NodoDepto buscarDepto(NodoDepto nodo, NodoDepto aux, String nDepto){
        //aux para recorrer arbol, nodo para guardar
        if(aux!=null){
            nodo = buscarDepto(nodo,aux.getHIzq(),nDepto);
            nodo = buscarDepto(nodo,aux.getHDer(),nDepto);
            if(aux.getNomDepto().equals(nDepto)){
                return aux;
            }
        }
        return nodo;
    }
    //---------------------------------------------------------------------------------ss
    public void despAnchura(NodoDepto nodoDep, ListaDobleCola LauxC) {
        do {
            if (LauxC.empty()) {
                NodoListaCola nuevoLC = new NodoListaCola(nodoDep);
                LauxC.insertFin(nuevoLC);
            }
            if (LauxC.getInicio().getInfo().getHizq() != null) {
                NodoListaCola nuevoLC = new NodoListaCola(LauxC.getInicio().getInfo().getHIzq());
                LauxC.insertFin(nuevoLC);
            }
            if (LauxC.getInicio().getInfo().getHder() != null) {
                NodoListaCola nuevoD = new NodoListaCola(LauxC.getInicio().getInfo().getHDer());
                LauxC.insertFin(nuevoD);
            }
            //agregar los hijos a la lista
            //eliminar los insertados para imprimirlos
            NodoListaCola aux = LauxC.getInicio();
            LauxC.removeInicio();
            System.out.println("\nNivel: "+aux.getInfo().getNivel());
            System.out.println("Nombre de Departamento: "+aux.getInfo().getNomDepto());
            System.out.println("Total de Ingresos Brutos: "+aux.getInfo().getTotalImpPerc()+"\n");
        } while (!LauxC.empty());
    }
    public void desplNodo(NodoDepto nodo){
        System.out.println("Nombre: "+nodo.getNomDepto());
        System.out.println("Nivel: "+nodo.getNivel());
        System.out.println("Total Horas Extra: "+nodo.getTotalHextra());
        System.out.println("Total de ingresos brutos: "+nodo.getTotalImpPerc()+"\n");
    }
    public void consultarDep(NodoDepto nodo){
        System.out.println("Nombre: "+nodo.getNomDepto());
        System.out.println("Nivel: "+nodo.getNivel());
        System.out.println("Total Horas Extra: "+nodo.getTotalHextra());
        System.out.println("Total de ingresos brutos: "+nodo.getTotalImpPerc()+"\n");
        System.out.println("\n[Nomina]: ");
        nodo.desplegar();

    }

System.out.println(
    public NodoDepto buscar(String nombre) {
        NodoDepto aux = getRaiz();
        while(aux != null && !nombre.equals(aux.getNomDepto())){
            if (aux.getNombreDepto().compareTo(nombre)<0) {
                aux=aux.getHIzq();
            } else {
                aux=aux.getHDer();
            }
        }
        return aux;
    }
}
